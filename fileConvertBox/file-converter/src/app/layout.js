'use client'

import Header from '@/components/Header'
import './globals.css'
import { Inter } from 'next/font/google'
import {Toaster} from 'react-hot-toast'
import { useEffect, useState } from 'react';
import myContext from '@/Reduxfolder/FileTypeContext'


const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {

  const [loading, setloading] = useState(false);
  const [gettype, setGettype] = useState(null);
  // setting the file name to show in the frontend
  const [filestoShow, setfilestoShow] = useState();
  // capturing the old filepath of backend for the seconed time
  const [Oldfile, setOldfile] = useState('');

  // run another fetch function for conversion of file 
  const GetFilePath = async (files, setfiles) => {
    setfilestoShow(files)
    try {
      const formData = new FormData();
      formData.append("files", files);
      setloading(true);
      const res = await fetch("http://localhost:5000/GetFileData", {
        method: "POST",
        body: formData,
      });

      const data = await res.json();
      if (!data.success) return console.error(data.message);
      setfiles(null);
      setloading(false);
      setOldfile(data?.filepath)
      console.log(data);
      setGettype(data?.fileType);
    } catch (err) {
      console.log(err.message);
      setloading(false);
      setfiles(null);
    }
  };


  const FetchDownload =async (filetype, Oldfile) => {
      try{
        const res = await fetch(`http://localhost:5000/FetchDownload`,{
            method: 'POST',
            headers: {
              'Content-Type': 'application/json', 
            },
            body:JSON.stringify({
              filetype,
              filepath:Oldfile
            })
        });

        const data = await res.json();
        if(!data.success ) console.log(data.message);
        console.log(data);
      }catch(err) {
        console.log(err.message);
      }
  }


  return (
    <html lang="en">
      <body className={` `}>
      <myContext.Provider value={{ GetFilePath, gettype,loading,FetchDownload, filestoShow, Oldfile }}>
        <Toaster/>
        <div className="headersection">
          <Header/>
        </div>
        {children}
        </myContext.Provider>
        </body>
    </html>
  )
}
